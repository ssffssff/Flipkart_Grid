# -*- coding: utf-8 -*-
"""DenseNet121.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vu55Rg-B6UnMWgf-fkoBmpNhYH171vuq
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dropout, Flatten, Dense
from keras import applications
from sklearn.metrics import pairwise_distances
from tensorflow.keras.applications import DenseNet121
import requests
from PIL import Image
import pickle
from datetime import datetime
from PIL import ImageFile
ImageFile.LOAD_TRUNCATED_IMAGES = True
import plotly.figure_factory as ff
import plotly.graph_objects as go
import plotly.express as px
#import streamlit as st
#use the below library while displaying the images in jupyter notebook
from IPython.display import display, Image

fashion_df = pd.read_csv("/content/drive/MyDrive/PyData/data/Footwear/Men/Images/images_with_product_ids/Data_img/data/fashion.csv")

apparel_boys = fashion_df[fashion_df["Gender"]=="Boys"]
apparel_girls = fashion_df[fashion_df["Gender"]=="Girls"]
footwear_men = fashion_df[fashion_df["Gender"]=="Men"]
footwear_women = fashion_df[fashion_df["Gender"]=="Women"]

def get_similar_products_cnn(product_id, num_results):
    if(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Boys"):
        extracted_features = boys_extracted_features
        Productids = boys_Productids
    elif(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Girls"):
        extracted_features = girls_extracted_features
        Productids = girls_Productids
    elif(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Men"):
        extracted_features = men_extracted_features
        Productids = men_Productids
    elif(fashion_df[fashion_df['ProductId']==product_id]['Gender'].values[0]=="Women"):
        extracted_features = women_extracted_features
        Productids = women_Productids
    Productids = list(Productids)
    doc_id = Productids.index(product_id)
    pairwise_dist = pairwise_distances(extracted_features, extracted_features[doc_id].reshape(1,-1))
    indices = np.argsort(pairwise_dist.flatten())[0:num_results]
    pdists  = np.sort(pairwise_dist.flatten())[0:num_results]
    print("="*20, "input product details", "="*20)
    ip_row = fashion_df[['ImageURL','ProductTitle']].loc[fashion_df['ProductId']==Productids[indices[0]]]
    for indx, row in ip_row.iterrows():
        display(Image(url=row['ImageURL'], width = 224, height = 224,embed=True))
        print('Product Title: ', row['ProductTitle'])
    print("\n","="*20, "Recommended products", "="*20)
    for i in range(1,len(indices)):
        print("\n","="*20, Productids[indices[i]] , "="*20)
        rows = fashion_df[['ImageURL','ProductTitle']].loc[fashion_df['ProductId']==Productids[indices[i]]]
        for indx, row in rows.iterrows():
            display(Image(url=row['ImageURL'], width = 224, height = 224,embed=True))
            print('Product Title: ', row['ProductTitle'])
            print('Euclidean Distance from input image:', pdists[i])

boys_extracted_features = np.load('/content/drive/MyDrive/DenseNet/Boys_DenseNet_features.npy')
boys_Productids = np.load('/content/drive/MyDrive/DenseNet/Boys_DenseNet_feature_product_ids.npy')
girls_extracted_features = np.load('/content/drive/MyDrive/DenseNet/Girls_DenseNet_features.npy')
girls_Productids = np.load('/content/drive/MyDrive/DenseNet/Girls_DenseNet_feature_product_ids.npy')
men_extracted_features = np.load('/content/drive/MyDrive/DenseNet/Men_DenseNet_features.npy')
men_Productids = np.load('/content/drive/MyDrive/DenseNet/Men_DenseNet_feature_product_ids.npy')
women_extracted_features = np.load('/content/drive/MyDrive/DenseNet/Women_DenseNet_features.npy')
women_Productids = np.load('/content/drive/MyDrive/DenseNet/Women_DenseNet_feature_product_ids.npy')
fashion_df["ProductId"] = fashion_df["ProductId"].astype(str)

get_similar_products_cnn('10672', 5) #Girls Apparel

"""# New Section

# New Section
"""

get_similar_products_cnn('11510', 5) #Womens Footwear

get_similar_products_cnn('11979', 6) #Mens Footwear

get_similar_products_cnn('18181', 6) #Boys apparel

def get_list_with_value_preference(product_id, num_results, dataframe, extracted_features_path, productId_path):
    extracted_features = np.load(extracted_features_path)
    Productids = list(np.load(productId_path))
    doc_id = Productids.index(product_id)
    pairwise_dist = pairwise_distances(extracted_features, extracted_features[doc_id].reshape(1, -1))
    indices = np.argsort(pairwise_dist.flatten())[0:num_results + 1]

    # Get the product values for the recommended products
    product_values = [dataframe.loc[dataframe['ProductId'] == Productids[idx]]['Value'].values[0] for idx in indices]

    # Sort the indices based on product values (higher value first, then lower value)
    sorted_indices = [x for _, x in sorted(zip(product_values, indices), reverse=True)]

    recommended_ids = [Productids[idx] for idx in sorted_indices]
    return recommended_ids